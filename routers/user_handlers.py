import bcrypt
from typing import Optional, List
from aiogram import Router, types
from aiogram.enums import ChatAction, ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ErrorEvent, BotCommand, MessageEntity, InputFile, BufferedInputFile
from filters.chat_type_filter import ChatTypeFilter

from config import settings

from models import WPReserve, \
    find_user_by_login, save_telegram_id, is_telegram_id_set, \
    find_user_by_telegram_id, find_actual_reserves, \
    find_reserves, find_place_by_id, remove_row, \
    add_reserves, delete_reserves, find_place_by_code
from main import bot

router = Router(name=__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
def get_reserves_list(reserves:Optional[List[WPReserve]]):
    if(not reserves):
        return "<b>–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>"
    line = "<h1>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π</h1>\n\n"
    for reserve in reserves:
        line += f"{reserve.place.place_code}: {reserve.reserve_begin} - {reserve.reserve_end}\n"
    return line

def is_user_authorized(telegram_id:int):
    return find_user_by_telegram_id(telegram_id)

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç—Ä–∏–∑–∞—Ü–∏—é
@router.message(Command(BotCommand(command="login", description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")))
async def command_login_handler(message: Message) -> None:
    try:
        _, login, password = message.text.split(' ')
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login –õ–æ–≥–∏–Ω –ü–∞—Ä–æ–ª—å)")
        return
    
    user = find_user_by_login(login)
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    if is_telegram_id_set(user, message.from_user.id):
        await message.reply("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.")
        return

    if user and bcrypt.checkpw(password.encode('utf-8'), user.user_pass.encode("utf-8")):
        save_telegram_id(user.ID, message.from_user.id)
        await message.reply("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        await bot.send_message(
            chat_id=settings.GROUP_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –∑–∞—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ª–æ–≥–∏–Ω–æ–º {message.from_user.username}"
        )
        meta = find_user_by_telegram_id(message.from_user.id)
        if meta and meta.user_meta_value != str(message.from_user.id):
            await bot.send_message(
                chat_id=meta.user_meta_value,
                text=f"–í –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—à—ë–ª –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫, –≤—ã –±–æ–ª—å—à–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. üôÇ",
            )
            remove_row(meta)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(Command(BotCommand(command="exit", description="–í—ã—Ö–æ–¥")))
async def command_login_handler(message: Message) -> None:
    user_meta = find_user_by_telegram_id(message.from_user.id)
    if(user_meta):
        remove_row(user_meta)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
        return
    await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã!")
    return
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç
@router.message(Command(BotCommand(command="reserve_list", description="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π")))
async def command_get_actual_reserves(message: Message) -> None:
    if(not is_user_authorized(message.from_user.id)):
        message.answer("<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã!</b>",
            parse_mode=ParseMode.HTML)
        return
    
    reserves = find_actual_reserves(message.from_user.id, message.date.timestamp())
    await message.answer(get_reserves_list(reserves),
        parse_mode=ParseMode.HTML)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç
@router.message(Command(BotCommand(command="reserve_history", description="–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π")))
async def command_get_reserves(message: Message) -> None:
    if(not is_user_authorized(message.from_user.id)):
        message.answer("<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã!</b>",
            parse_mode=ParseMode.HTML)
        return
    
    reserves = find_reserves(message.from_user.id)
    await message.answer(get_reserves_list(reserves),
        parse_mode=ParseMode.HTML)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
@router.message(Command(BotCommand(command="reserve_add", description="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é")))
async def command_get_reserves(message: Message) -> None:
    if(not is_user_authorized(message.from_user.id)):
        message.answer("<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã!</b>",
            parse_mode=ParseMode.HTML)
        return
    
    try:
        _, hours_count = message.text.split(' ')
        hours_count = int(hours_count)
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reserve_add –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∞—Å–æ–≤_—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏)")
        return
    place = add_reserves(find_user_by_telegram_id(message.from_user.id), hours_count)
    if place:
        await message.answer(f"–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ <b>—É—Å–ø–µ—à–Ω–æ</b>\n \
                             –í–∞—à–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ - {place.place_code}",
            parse_mode=ParseMode.HTML)
    else:
        await message.answer("<b>–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å</b>",
            parse_mode=ParseMode.HTML)

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
@router.message(Command(BotCommand(command="reserve_delete", description="–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é")))
async def command_get_reserves(message: Message) -> None:
    if(not is_user_authorized(message.from_user.id)):
        message.answer("<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã!</b>",
            parse_mode=ParseMode.HTML)
        return
   
    try:
        _, place_code = message.text.split(' ')
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reserve_delete –ö–æ–¥_–ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ_–º–µ—Å—Ç–∞)")
        return
    if delete_reserves(find_user_by_telegram_id(message.from_user.id), find_place_by_code(place_code)):
        await message.answer("<b>–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞</b>",
            parse_mode=ParseMode.HTML)
    else:
        await message.answer("<b>–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å!</b>",
            parse_mode=ParseMode.HTML)
    
