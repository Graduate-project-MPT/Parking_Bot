from aiogram import Router, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, BotCommand, ReplyKeyboardRemove
import bcrypt

from .base_func import is_authorize

from db.classes import WPUser
from db.queries.base import sql_delete
from db.queries.get import get_user_by_login, get_user_meta_exist, get_usermeta_by_telegram_id
from db.queries.post import save_telegram_id
from filters.chat_type_filter import ChatTypeFilter
from keyboards.reply.common import get_auth_rk, get_no_auth_rk, ButtonRK
from config import settings

router = Router(name=__name__)

# –ü–æ–º–æ—â—å —Å –∫–æ–º–º–∞–Ω–¥–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@router.message(F.text == ButtonRK.AUTH)
async def command_login_help(message: Message):
    await message.answer(
        "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login \"–õ–æ–≥–∏–Ω\" \"–ü–∞—Ä–æ–ª—å\""
    )

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç—Ä–∏–∑–∞—Ü–∏—é
@router.message(Command(BotCommand(command="login", description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")),
                ChatTypeFilter(chat_type=["private"]))
async def command_login_handler(message: Message):
    try:
        _, login, password = message.text.split(' ')
    except Exception as e:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login \"–õ–æ–≥–∏–Ω\" \"–ü–∞—Ä–æ–ª—å\")",
            reply_markup=get_no_auth_rk()  
        )
        return

    user = get_user_by_login(login)
    if not user:
        await message.reply(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_no_auth_rk()  
        )
        return
    if get_user_meta_exist(user, message.from_user.id):
        await message.reply(
            "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.",
            reply_markup=get_auth_rk()  
        )
        return

    if user and bcrypt.checkpw(password.encode('utf-8'), user.user_pass.encode("utf-8")):
        save_telegram_id(user, message.from_user.id)
        await message.reply(
            "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=get_auth_rk()  
        )
        await message.bot.send_message(
            chat_id=settings.GROUP_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –∑–∞—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ª–æ–≥–∏–Ω–æ–º {message.from_user.username}"
        )
        meta = get_usermeta_by_telegram_id(message.from_user.id)
        if meta and meta.user_meta_value != str(message.from_user.id):
            await message.bot.send_message(
                chat_id=meta.user_meta_value,
                text=f"–í –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—à—ë–ª –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫, "
                     f"–≤—ã –±–æ–ª—å—à–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. üôÇ",
                reply_markup=get_no_auth_rk()
            )
            sql_delete(meta)
    else:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.",
            reply_markup=get_no_auth_rk()  
        )

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(F.text == ButtonRK.EXIT)
@router.message(Command(BotCommand(command="exit", description="–í—ã—Ö–æ–¥")),
                ChatTypeFilter(chat_type=["private"]))
async def command_login_handler(message: Message):
    user_meta = get_usermeta_by_telegram_id(message.from_user.id)
    if user_meta:
        sql_delete(user_meta)
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!",
            reply_markup=get_no_auth_rk()  
        )
        return
    await message.answer(
        "–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã!",
        reply_markup=get_no_auth_rk()  
    )
    return

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(F.text == ButtonRK.LOGIN)
@router.message(Command(BotCommand(command="get_login", description="–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω")),
                ChatTypeFilter(chat_type=["private"]))
async def command_get_login_handler(message: Message):
    user:WPUser = is_authorize(message)
    if not user:
        return
    message.answer(
        "–í–∞—à –ª–æ–≥–∏–Ω - <b>{user.user_login}</b>",
        parse_mode=ParseMode.HTML
    )
